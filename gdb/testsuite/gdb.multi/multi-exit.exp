# This testcase is part of GDB, the GNU debugger.

# Copyright 2020 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test receiving TARGET_WAITKIND_EXITED events from multiple
# inferiors.  In all stop-mode, upon receiving the exit event from one
# of the inferiors, GDB will try to stop the other inferior, too.  So,
# a stop request will be sent.  Receiving a TARGET_WAITKIND_EXITED
# status kind as a response to that stop request instead of a
# TARGET_WAITKIND_STOPPED should be handled by GDB without problems.

standard_testfile

if {[use_gdb_stub]} {
    return 0
}

if {[build_executable "failed to prepare" $testfile $srcfile]} {
    return -1
}

# We are testing GDB's ability to stop all threads.
# Hence, go with the all-stop-on-top-of-non-stop mode.
save_vars { GDBFLAGS } {
    append GDBFLAGS " -ex \"maint set target-non-stop on\""
    clean_restart ${binfile}
}

with_test_prefix "inf 1" {
    gdb_load $binfile

    if {[gdb_start_cmd] < 0} {
	fail "could not start"
	return -1
    }
    gdb_test "" ".*reakpoint ., main .*${srcfile}.*" "start"
}

# Start another inferior.
gdb_test "add-inferior" "Added inferior 2.*" \
    "add empty inferior 2"
gdb_test "inferior 2" "Switching to inferior 2.*" \
    "switch to inferior 2"

with_test_prefix "inf 2" {
    gdb_load $binfile

    if {[gdb_start_cmd] < 0} {
	fail "could not start"
	return -1
    }
    gdb_test "" ".*reakpoint ., main .*${srcfile}.*" "start"
}

# We want to continue both processes.
gdb_test_no_output "set schedule-multiple on"

set exited_inferior ""

# We want GDB to complete the command and return the prompt
# instead of going into an infinite loop.
gdb_test_multiple "continue" "first continue" {
    -re "Inferior ($decimal) \[^\n\r\]+ exited normally.*$gdb_prompt $" {
	set exited_inferior $expect_out(1,string)
	pass $gdb_test_name
    }
}

if {$exited_inferior == ""} {
    fail "first continue"
    return -1
}

if {$exited_inferior == 1} {
    set other_inferior 2
} else {
    set other_inferior 1
}

# Switch to the other inferior and check it, too, continues to the end.
gdb_test "inferior $other_inferior" \
    ".*Switching to inferior $other_inferior.*" \
    "switch to the other inferior"

gdb_continue_to_end

# Finally, check if we can re-run both inferiors.
delete_breakpoints

gdb_test "run" "$inferior_exited_re normally\]" \
    "re-run the other inferior"

gdb_test "inferior $exited_inferior" \
    ".*Switching to inferior $exited_inferior.*" \
    "switch to the first exited inferior"

gdb_test "run" "$inferior_exited_re normally\]" \
    "re-run the first exited inferior"
